import streamlit as st
import pandas as pd
from openpyxl import load_workbook
import io
import tempfile
import os
from typing import Dict, Any, Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –û–±—Ä–∞–±–æ—Ç–∫–∏ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤",
    page_icon="üìú",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_reference_data(skills_content: bytes) -> Dict[str, Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
        tmp_file.write(skills_content)
        tmp_file_path = tmp_file.name
    
    try:
        skills_df = pd.read_excel(tmp_file_path)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –º–∞–ø–ø–∏–Ω–≥–∞: {–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {—É—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏: –æ–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–≤—ã–∫–æ–≤}}
        grade_mapping = {}
        
        for _, row in skills_df.iterrows():
            if '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞' in skills_df.columns and '–£—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏' in skills_df.columns and '–û–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–≤—ã–∫–æ–≤' in skills_df.columns:
                discipline = str(row['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']).strip() if pd.notna(row['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']) else ''
                level = str(row['–£—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏']).strip() if pd.notna(row['–£—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏']) else ''
                description = str(row['–û–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–≤—ã–∫–æ–≤']).strip() if pd.notna(row['–û–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–≤—ã–∫–æ–≤']) else ''
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not discipline or not level or not description:
                    continue
                    
                if discipline not in grade_mapping:
                    grade_mapping[discipline] = {}
                
                if level in ['–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–•–æ—Ä–æ—à–æ', '–û—Ç–ª–∏—á–Ω–æ']:
                    grade_mapping[discipline][level] = description
        
        return grade_mapping
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(tmp_file_path)
        except:
            pass

def process_student_data(df: pd.DataFrame, grade_mapping: Dict[str, Dict[str, str]]) -> Tuple[pd.DataFrame, list]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    results = []
    processing_log = []
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ WebSocket
    max_log_entries = 1000
    
    processing_log.append(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(df)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
    processing_log.append(f"üóÇÔ∏è –ù–∞–π–¥–µ–Ω–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: {len(grade_mapping)}")
    processing_log.append(f"üìÅ –ö–æ–ª–æ–Ω–∫–∏ –≤ Excel —Ñ–∞–π–ª–µ: {list(df.columns)}")
    
    log_count = len(processing_log)
    
    for index, row in df.iterrows():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ª–æ–≥–∞
        if log_count >= max_log_entries:
            processing_log.append("‚ö†Ô∏è –õ–æ–≥ –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π)")
            break
            
        student_results = []
        student_email = str(row['–ü–æ—á—Ç–∞']).strip() if '–ü–æ—á—Ç–∞' in df.columns and pd.notna(row['–ü–æ—á—Ç–∞']) and str(row['–ü–æ—á—Ç–∞']).strip() else f"–°—Ç—É–¥–µ–Ω—Ç {index + 1}"
        
        processing_log.append(f"üë§ –°—Ç—É–¥–µ–Ω—Ç {index + 1}: {student_email}")
        log_count += 1
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∞—Ä (–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –æ—Ü–µ–Ω–∫–∞)
        processed_pairs = set()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∏–∑ —Ç—Ä–µ—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
        for discipline_num in range(1, 4):
            if log_count >= max_log_entries:
                break
                
            try:
                discipline_col = f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ {discipline_num}"
                grade_5_col = f"–û—Ü–µ–Ω–∫–∞ 5 –±–∞–ª–ª–æ–≤ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ {discipline_num}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫
                if discipline_col not in df.columns or grade_5_col not in df.columns:
                    continue
                
                full_discipline = str(row[discipline_col]).strip() if pd.notna(row[discipline_col]) else ""
                grade_value = row[grade_5_col]
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if not full_discipline or pd.isna(grade_value):
                    continue
                
                clean_grade = str(grade_value).strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–≤–µ—Å—Ç–Ω–∞ –ª–∏ –æ—Ü–µ–Ω–∫–∞
                valid_grades = ['–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–•–æ—Ä–æ—à–æ', '–û—Ç–ª–∏—á–Ω–æ']
                if clean_grade not in valid_grades:
                    continue
                
                # –ö–ª—é—á: (–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –æ—Ü–µ–Ω–∫–∞)
                discipline_grade_pair = (full_discipline, clean_grade)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
                if discipline_grade_pair in processed_pairs:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
                if full_discipline not in grade_mapping:
                    continue
                
                if clean_grade not in grade_mapping[full_discipline]:
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–≤—ã–∫ –≤ —Å–ø–∏—Å–æ–∫
                result_text = grade_mapping[full_discipline][clean_grade]
                formatted_result = f"- {full_discipline} ({clean_grade})"
                student_results.append(formatted_result)
                processed_pairs.add(discipline_grade_pair)
                
            except Exception:
                continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_result = "\n".join(student_results) if student_results else ""
        results.append(final_result)
    
    processing_log.append(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π DataFrame
    df_result = df.copy()
    df_result['–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'] = results
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å)
    columns_to_drop = [col for col in df_result.columns if col.startswith('–ù–∞–∑–≤–∞–Ω–∏–µ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã ')]
    if columns_to_drop:
        df_result = df_result.drop(columns=columns_to_drop)
    
    return df_result, processing_log

def main():
    st.title("üìú –°–∏—Å—Ç–µ–º–∞ –û–±—Ä–∞–±–æ—Ç–∫–∏ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
        st.info("""
        **–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:**
        - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        - –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
        - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        """)
        
        st.header("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª–∞–º")
        st.markdown("""
        **üìä Excel —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:**
        - –ö–æ–ª–æ–Ω–∫—É `–ü–æ—á—Ç–∞`
        - `–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ 1/2/3`
        - `–û—Ü–µ–Ω–∫–∞ 5 –±–∞–ª–ª–æ–≤ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ 1/2/3`
        - –û—Ü–µ–Ω–∫–∏: `–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ`, `–•–æ—Ä–æ—à–æ`, `–û—Ç–ª–∏—á–Ω–æ`
        
        **üìÑ Excel —Ñ–∞–π–ª –Ω–∞–≤—ã–∫–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:**
        - –ö–æ–ª–æ–Ω–∫–∏: –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –£—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏, –û–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–≤—ã–∫–æ–≤
        - –£—Ä–æ–≤–Ω–∏ –æ—Ü–µ–Ω–∫–∏: –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, –•–æ—Ä–æ—à–æ, –û—Ç–ª–∏—á–Ω–æ
        """)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        excel_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
            type=['xlsx', 'xls'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –∏ –∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö",
            key="excel_file"
        )
    
    with col2:
        st.subheader("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –Ω–∞–≤—ã–∫–æ–≤")
        skills_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏",
            type=['xlsx', 'xls'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –£—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏, –û–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–≤—ã–∫–æ–≤",
            key="skills_file"
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    if excel_file and skills_file:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            with st.spinner("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã..."):
                df = pd.read_excel(excel_file)
                skills_content = skills_file.getvalue()
                grade_mapping = load_reference_data(skills_content)
            
            st.success("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
            st.subheader("üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
            
            col1, col2, col3 = st.columns([1, 1, 1])
            with col1:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", len(df))
            with col2:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫", len(df.columns))
            with col3:
                st.metric("–î–∏—Å—Ü–∏–ø–ª–∏–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ", len(grade_mapping))
            
            # –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
            with st.expander("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö Excel"):
                st.dataframe(df.head())
            
            with st.expander("üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–∞–≤—ã–∫–æ–≤"):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                ref_data = []
                for discipline, levels in grade_mapping.items():
                    for level, description in levels.items():
                        ref_data.append({
                            '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞': discipline,
                            '–£—Ä–æ–≤–µ–Ω—å': level,
                            '–û–ø–∏—Å–∞–Ω–∏–µ': description[:100] + "..." if len(description) > 100 else description
                        })
                ref_df = pd.DataFrame(ref_data)
                st.dataframe(ref_df)
            
            # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
                with st.spinner("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                    result_df, processing_log = process_student_data(df, grade_mapping)
                
                st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                tab1, tab2, tab3 = st.tabs(["üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìã –õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏", "üíæ –°–∫–∞—á–∞—Ç—å"])
                
                with tab1:
                    st.dataframe(result_df, use_container_width=True)
                
                with tab2:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –ª–æ–≥–∞
                    log_text = "\n".join(processing_log[-500:])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –∑–∞–ø–∏—Å–µ–π
                    if len(processing_log) > 500:
                        log_text = f"‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(processing_log)}\n\n" + log_text
                    
                    st.text_area(
                        "–î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                        value=log_text,
                        height=300
                    )
                
                with tab3:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    output = io.BytesIO()
                    with pd.ExcelWriter(output, engine='openpyxl') as writer:
                        result_df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
                    output.seek(0)
                    
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Excel",
                        data=output.getvalue(),
                        file_name="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã_—Å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                    
                    st.success("üí° –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!")
        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}")
    
    elif excel_file:
        st.info("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–∫–∂–µ Excel —Ñ–∞–π–ª —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    elif skills_file:
        st.info("üìä –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–∫–∂–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    else:
        st.info("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

if __name__ == "__main__":
    main()
