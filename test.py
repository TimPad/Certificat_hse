import streamlit as st
import pandas as pd
from openpyxl import load_workbook
import io
import tempfile
import os
from typing import Dict, Any, Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –û–±—Ä–∞–±–æ—Ç–∫–∏ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤",
    page_icon="üìú",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_reference_data(skills_content: bytes) -> Dict[str, Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏"""
    with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
        tmp_file.write(skills_content)
        tmp_file_path = tmp_file.name

    try:
        skills_df = pd.read_excel(tmp_file_path)

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ (–ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏ —É—Ä–æ–≤–Ω—é)
        skills_df = skills_df.drop_duplicates(subset=["–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "–£—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏"])

        grade_mapping = {}

        for _, row in skills_df.iterrows():
            discipline = str(row['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']).strip().lower()
            level = str(row['–£—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏']).strip()
            description = str(row['–û–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–≤—ã–∫–æ–≤']).strip()

            if discipline not in grade_mapping:
                grade_mapping[discipline] = {}

            level_key_mapping = {
                '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ': '3',
                '–•–æ—Ä–æ—à–æ': '4',
                '–û—Ç–ª–∏—á–Ω–æ': '5'
            }

            if level in level_key_mapping:
                grade_mapping[discipline][level_key_mapping[level]] = description

        return grade_mapping
    finally:
        os.unlink(tmp_file_path)


def process_student_data(df: pd.DataFrame, grade_mapping: Dict[str, Dict[str, str]]) -> Tuple[pd.DataFrame, list]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""

    grade_column_mapping = {
        '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ': '3',
        '–•–æ—Ä–æ—à–æ': '4',
        '–û—Ç–ª–∏—á–Ω–æ': '5'
    }

    results = []
    processing_log = []

    processing_log.append(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(df)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
    processing_log.append(f"üóÇÔ∏è –ù–∞–π–¥–µ–Ω–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: {len(grade_mapping)}")

    for index, row in df.iterrows():
        student_results = []
        student_email = row.get('–ü–æ—á—Ç–∞', f"–°—Ç—É–¥–µ–Ω—Ç {index + 1}")

        processing_log.append(f"\nüë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_email}")

        discipline_results = {}

        for discipline_num in range(1, 4):
            try:
                discipline_col = f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ {discipline_num}"
                grade_5_col = f"–û—Ü–µ–Ω–∫–∞ 5 –±–∞–ª–ª–æ–≤ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ {discipline_num}"

                if discipline_col not in df.columns or grade_5_col not in df.columns:
                    continue

                full_discipline = str(row[discipline_col]).strip().lower() if pd.notna(row[discipline_col]) else ""
                grade_value = row[grade_5_col]

                if not full_discipline or pd.isna(grade_value):
                    continue

                clean_grade = str(grade_value).strip()

                if clean_grade not in grade_column_mapping:
                    continue

                grade_key = grade_column_mapping[clean_grade]

                display_name_col = f"–ù–∞–∑–≤–∞–Ω–∏–µ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {discipline_num}"
                if display_name_col in df.columns and pd.notna(row[display_name_col]):
                    display_name = str(row[display_name_col]).strip()
                else:
                    display_name = row[discipline_col]

                if full_discipline not in grade_mapping:
                    continue

                if grade_key not in grade_mapping[full_discipline]:
                    continue

                if full_discipline in discipline_results:
                    existing_grade = discipline_results[full_discipline][0]
                    if int(grade_key) > int(existing_grade):
                        result_text = grade_mapping[full_discipline][grade_key]
                        discipline_results[full_discipline] = (grade_key, result_text, display_name)
                else:
                    result_text = grade_mapping[full_discipline][grade_key]
                    discipline_results[full_discipline] = (grade_key, result_text, display_name)

            except Exception as e:
                processing_log.append(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {discipline_num}: {str(e)}")

        student_results = []
        for discipline, (grade, description, display_name) in discipline_results.items():
            formatted_result = f"{display_name}:\n{description}"
            student_results.append(formatted_result)

        # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ç–µ–∫—Å—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        student_results = list(dict.fromkeys(student_results))

        final_result = "\n\n".join(student_results) if student_results else ""
        results.append(final_result)

    df_result = df.copy()
    df_result['–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'] = results

    columns_to_drop = [col for col in df_result.columns if col.startswith('–ù–∞–∑–≤–∞–Ω–∏–µ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã ')]
    if columns_to_drop:
        df_result = df_result.drop(columns=columns_to_drop)

    return df_result, processing_log


def main():
    st.title("üìú –°–∏—Å—Ç–µ–º–∞ –û–±—Ä–∞–±–æ—Ç–∫–∏ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    st.markdown("---")

    with st.sidebar:
        st.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
        st.info("""
        **–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:**
        - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        - –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
        - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        """)

    col1, col2 = st.columns([1, 1])

    with col1:
        st.subheader("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        excel_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", type=['xlsx', 'xls'])

    with col2:
        st.subheader("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –Ω–∞–≤—ã–∫–æ–≤")
        skills_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏", type=['xlsx', 'xls'])

    if excel_file and skills_file:
        try:
            df = pd.read_excel(excel_file)
            skills_content = skills_file.read()
            grade_mapping = load_reference_data(skills_content)

            if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
                result_df, processing_log = process_student_data(df, grade_mapping)

                st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                st.dataframe(result_df, width="stretch")

                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    result_df.to_excel(writer, index=False)

                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Excel",
                    data=output.getvalue(),
                    file_name="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã_—Å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}")


if __name__ == "__main__":
    main()
