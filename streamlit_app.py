import streamlit as st
import pandas as pd
from openpyxl import load_workbook
import io
import tempfile
import os
from typing import Dict, Any, Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –û–±—Ä–∞–±–æ—Ç–∫–∏ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤",
    page_icon="üìú",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_reference_data(skills_content: bytes) -> Dict[str, Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
        tmp_file.write(skills_content)
        tmp_file_path = tmp_file.name
    
    try:
        skills_df = pd.read_excel(tmp_file_path)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –º–∞–ø–ø–∏–Ω–≥–∞: {–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {—É—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏: –æ–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–≤—ã–∫–æ–≤}}
        grade_mapping = {}
        
        for _, row in skills_df.iterrows():
            discipline = row['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']
            level = row['–£—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏']
            description = row['–û–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–≤—ã–∫–æ–≤']
            
            if discipline not in grade_mapping:
                grade_mapping[discipline] = {}
            
            # –ú–∞–ø–ø–∏–º —É—Ä–æ–≤–Ω–∏ –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            level_key_mapping = {
                '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ': '3',
                '–•–æ—Ä–æ—à–æ': '4',
                '–û—Ç–ª–∏—á–Ω–æ': '5'
            }
            
            if level in level_key_mapping:
                grade_mapping[discipline][level_key_mapping[level]] = description
        
        return grade_mapping
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_file_path)

def process_student_data(df: pd.DataFrame, grade_mapping: Dict[str, Dict[str, str]]) -> Tuple[pd.DataFrame, list]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
    grade_column_mapping = {
        '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ': '3',
        '–•–æ—Ä–æ—à–æ': '4',
        '–û—Ç–ª–∏—á–Ω–æ': '5'
    }
    
    results = []
    processing_log = []
    
    processing_log.append(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(df)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
    processing_log.append(f"üóÇÔ∏è –ù–∞–π–¥–µ–Ω–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: {len(grade_mapping)}")
    processing_log.append(f"üìã –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: {list(grade_mapping.keys())}")
    processing_log.append(f"üìÅ –ö–æ–ª–æ–Ω–∫–∏ –≤ Excel —Ñ–∞–π–ª–µ: {list(df.columns)}")
    
    for index, row in df.iterrows():
        student_results = []
        student_name = row.iloc[0] if len(row) > 0 else f"–°—Ç—É–¥–µ–Ω—Ç {index + 1}"
        
        processing_log.append(f"\nüë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_name}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∏–∑ —Ç—Ä–µ—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
        for discipline_num in range(1, 4):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                discipline_col = f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ {discipline_num}"
                grade_5_col = f"–û—Ü–µ–Ω–∫–∞ 5 –±–∞–ª–ª–æ–≤ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ {discipline_num}"
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –æ—Ü–µ–Ω–∫—É
                if discipline_col in df.columns and grade_5_col in df.columns:
                    full_discipline = str(row[discipline_col]).strip()
                    grade_value = row[grade_5_col]
                else:
                    processing_log.append(f"    ‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: '{discipline_col}' –∏–ª–∏ '{grade_5_col}'")
                    continue
                
                processing_log.append(f"  üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ {discipline_num}: '{full_discipline}', –û—Ü–µ–Ω–∫–∞: {grade_value}")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏–ª–∏ –æ—Ü–µ–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                if pd.isna(full_discipline) or pd.isna(grade_value):
                    processing_log.append(f"    ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–ª–∏ –æ—Ü–µ–Ω–∫–∞")
                    continue
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ü–µ–Ω–∫–∏
                clean_grade = str(grade_value).strip()
                
                processing_log.append(f"    üîç –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è: '{full_discipline}' —Å –æ—Ü–µ–Ω–∫–æ–π '{clean_grade}'")
                
                # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ü–µ–Ω–∫–∏ –∫–æ–ª–æ–Ω–∫–∞–º
                if clean_grade not in grade_column_mapping:
                    processing_log.append(f"    ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: '{clean_grade}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ/–•–æ—Ä–æ—à–æ/–û—Ç–ª–∏—á–Ω–æ)")
                    continue
                    
                grade_key = grade_column_mapping[clean_grade]
                processing_log.append(f"    üîÑ –û—Ü–µ–Ω–∫–∞ '{clean_grade}' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–µ {grade_key}")
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
                target_discipline = None
                if full_discipline in grade_mapping:
                    target_discipline = full_discipline
                    processing_log.append(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: '{full_discipline}'")
                else:
                    processing_log.append(f"    ‚ùå –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ '{full_discipline}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ")
                    processing_log.append(f"    üìã –ü–µ—Ä–≤—ã–µ 3 –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: {list(grade_mapping.keys())[:3]}...")
                
                if target_discipline and target_discipline in grade_mapping:
                    if grade_key in grade_mapping[target_discipline]:
                        result_text = grade_mapping[target_discipline][grade_key]
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        short_name_col = f"–ù–∞–∑–≤–∞–Ω–∏–µ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {discipline_num}"
                        if short_name_col in df.columns:
                            short_name = str(row[short_name_col]).strip()
                            formatted_discipline = short_name.capitalize()
                        else:
                            formatted_discipline = full_discipline
                        
                        formatted_result = f"{formatted_discipline}:\n{result_text}"
                        student_results.append(formatted_result)
                        processing_log.append(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: '{formatted_discipline}' ‚Üí —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                    else:
                        processing_log.append(f"    ‚ö†Ô∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ {clean_grade}")
                else:
                    processing_log.append(f"    ‚ùå –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ '{full_discipline}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ")
                    processing_log.append(f"    üìã –ü–µ—Ä–≤—ã–µ 3 –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: {list(grade_mapping.keys())[:3]}...")
                    
            except Exception as e:
                processing_log.append(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {discipline_num}: {str(e)}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Ä–∞–∑–¥–µ–ª—è–µ–º –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏)
        final_result = "\n\n".join(student_results) if student_results else ""
        results.append(final_result)
        
        processing_log.append(f"  üéØ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {student_name}: '{final_result}'")
    
    processing_log.append(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ DataFrame
    df_result = df.copy()
    df_result['–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'] = results
    
    return df_result, processing_log

def main():
    st.title("üìú –°–∏—Å—Ç–µ–º–∞ –û–±—Ä–∞–±–æ—Ç–∫–∏ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
        st.info("""
        **–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:**
        - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        - –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
        - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        """)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        st.header("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä Excel —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            current_dir = os.path.dirname(os.path.abspath(__file__))
            
            # Excel –ø—Ä–∏–º–µ—Ä
            excel_example_path = os.path.join(current_dir, '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø—Ä–∏–º–µ—Ä.xlsx')
            
            if os.path.exists(excel_example_path):
                with open(excel_example_path, 'rb') as example_file:
                    excel_example_data = example_file.read()
                
                st.download_button(
                    label="üìä –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä Excel —Ñ–∞–π–ª–∞",
                    data=excel_example_data,
                    file_name="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø—Ä–∏–º–µ—Ä.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    help="–°–∫–∞—á–∞–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ —à–∞–±–ª–æ–Ω –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
                )
            else:
                st.warning("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä Excel —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
            
            # Excel —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
            skills_example_path = os.path.join(current_dir, '–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_–Ω–∞–≤—ã–∫–∏.xlsx')
            
            if os.path.exists(skills_example_path):
                with open(skills_example_path, 'rb') as skills_file:
                    skills_data = skills_file.read()
                
                st.download_button(
                    label="üìÑ –°–∫–∞—á–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–∞–≤—ã–∫–æ–≤",
                    data=skills_data,
                    file_name="–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_–Ω–∞–≤—ã–∫–∏.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    help="–°–∫–∞—á–∞–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ –ø—Ä–∏–º–µ—Ä —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏"
                )
            else:
                st.warning("‚ö†Ô∏è –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–∞–≤—ã–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
                
            st.success("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ñ–∞–π–ª—ã –∫–∞–∫ –æ–±—Ä–∞–∑—Ü—ã –¥–ª—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã!")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤: {str(e)}")
        
        st.header("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª–∞–º")
        st.markdown("""
        **üìä Excel —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:**
        - –ö–æ–ª–æ–Ω–∫–∏ `–£—á–∞—â–∏–π—Å—è`
        - `–ù–∞–∑–≤–∞–Ω–∏–µ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã 1/2/3` –∏–ª–∏ `–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ 1/2/3`
        - `–û—Ü–µ–Ω–∫–∞ 5 –±–∞–ª–ª–æ–≤ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ 1/2/3`
        - –û—Ü–µ–Ω–∫–∏: `–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ`, `–•–æ—Ä–æ—à–æ`, `–û—Ç–ª–∏—á–Ω–æ`
        
        **üìÑ Excel —Ñ–∞–π–ª –Ω–∞–≤—ã–∫–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:**
        - –ö–æ–ª–æ–Ω–∫–∏: –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –£—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏, –û–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–≤—ã–∫–æ–≤
        - –£—Ä–æ–≤–Ω–∏ –æ—Ü–µ–Ω–∫–∏: –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, –•–æ—Ä–æ—à–æ, –û—Ç–ª–∏—á–Ω–æ
        - –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ü–µ–Ω–∫–∏
        
        üí° **–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞!**
        """)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        excel_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
            type=['xlsx', 'xls'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –∏ –∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö"
        )
    
    with col2:
        st.subheader("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –Ω–∞–≤—ã–∫–æ–≤")
        skills_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏",
            type=['xlsx', 'xls'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –£—Ä–æ–≤–µ–Ω—å_–æ—Ü–µ–Ω–∫–∏, –û–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–≤—ã–∫–æ–≤"
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    if excel_file and skills_file:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            with st.spinner("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã..."):
                df = pd.read_excel(excel_file)
                skills_content = skills_file.read()
                grade_mapping = load_reference_data(skills_content)
            
            st.success("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
            st.subheader("üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
            
            col1, col2, col3 = st.columns([1, 1, 1])
            with col1:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", len(df))
            with col2:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫", len(df.columns))
            with col3:
                st.metric("–î–∏—Å—Ü–∏–ø–ª–∏–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ", len(grade_mapping))
            
            # –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
            with st.expander("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö Excel"):
                st.dataframe(df.head())
            
            with st.expander("üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–∞–≤—ã–∫–æ–≤"):
                ref_df = pd.DataFrame.from_dict(grade_mapping, orient='index')
                st.dataframe(ref_df)
            
            # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
                with st.spinner("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                    result_df, processing_log = process_student_data(df, grade_mapping)
                
                st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                tab1, tab2, tab3 = st.tabs(["üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìã –õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏", "üíæ –°–∫–∞—á–∞—Ç—å"])
                
                with tab1:
                    st.dataframe(result_df, width="stretch")
                
                with tab2:
                    st.text_area(
                        "–î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                        value="\n".join(processing_log),
                        height=300
                    )
                
                with tab3:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    output = io.BytesIO()
                    with pd.ExcelWriter(output, engine='openpyxl') as writer:
                        result_df.to_excel(writer, index=False)
                    
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Excel",
                        data=output.getvalue(),
                        file_name="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã_—Å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                    
                    st.success("üí° –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!")
        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}")
            st.exception(e)
    
    elif excel_file:
        st.info("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–∫–∂–µ Excel —Ñ–∞–π–ª —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    elif skills_file:
        st.info("üìä –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–∫–∂–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    else:
        st.info("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666;'>
            <p>–°–∏—Å—Ç–µ–º–∞ –û–±—Ä–∞–±–æ—Ç–∫–∏ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ v1.0.0 | 
            –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Streamlit üöÄ</p>
        </div>
        """, 
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
